<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>golang-channel</title>
    <link href="/2021/01/05/undefined/"/>
    <url>/2021/01/05/undefined/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-channel"><a href="#golang-channel" class="headerlink" title="golang-channel"></a>golang-channel</h1><ul><li><p>定义</p><ul><li><p>通道是可以让一个goroutine发送特定知道倒另一个goroutine的通信机制。每一个通道是一个具体类型的导管，叫做通道的元素类型，通道的作用是连接各个goroutine。通道为引用类型，零值为nil，同类型的通道可以用“==”进行判等操作。</p></li><li><p>通道有两个主要操作：发送（send）和接收（receive），两者统称为通信。<code>ch &lt;- x</code>为将x发送到ch通道中，<code>x = &lt;- ch</code>为接收ch通道中的信息，<code>&lt;- ch</code>为接收通道ch中信息并丢弃。</p></li><li><p>通道还支持第三种操作：关闭（close），它通过一个标志位来指示当前已经发送完毕，这个通道后面没有值了，关闭后的通道执行发送操作将引发panic，在一个已经关闭的通道上进行操作，将获取所有已经发送的值，直到通道为空；这时任何接收操作都会立即完成，同时获取到一个通道元素类型对应的零值。调用内置函数<code>close(ch)</code>关闭ch通道</p></li><li><p>根据使用场景进行细分，通道有一种单向通道类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">ch1 <span class="hljs-keyword">chan</span> &lt;- <span class="hljs-keyword">int</span> <br><span class="hljs-comment">// ch1:通道名</span><br><span class="hljs-comment">// chan &lt;- :指定了通道的方向，为仅发送的通道</span><br><span class="hljs-comment">// int :指定了该通道内元素为int</span><br>ch2 &lt;- <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span><br><span class="hljs-comment">// ch2:通道名</span><br><span class="hljs-comment">// &lt;- chan:指定了通道的方向，为仅接收的通道</span><br><span class="hljs-comment">// int:指定了该通道内元素为int</span><br><br>单向通道主要用来防止通道被滥用，约束函数的行为<br>在使用过程中，任何时间将双向通道转换为单向通道都是可行的，但是反过来是不允许的<br></code></pre></td></tr></table></figure></li><li><p>通道可以设置缓冲，通过make设置的可选参数进行调整，默认为无缓冲通道。无缓冲通道的发送接收流程是阻塞的，只要发送的信息违背接收没发送操作将被阻塞，直到上一个信息被接。缓冲通道在上一条信息为被接收时根据缓冲区大小仍可以进行发送信息操作，直到缓冲区为零，接收操作类似。</p></li></ul></li><li><p>其它</p><ul><li><p>发送信息到通道，发送的时副本，即发生发送操作时，存在两步流程：1、复制信息的值；2、将复制的值放入通道。接受操作有三步流程：1、复制通道内信息的值；2、将复制的值放到信息接收方；3、删除掉通道内的信息值。</p></li><li><p>对通道的发送和接收操作的基本特性</p><ul><li>对于同一个通道，发送操作之间时互斥的，接受操作之间也是互斥的；</li><li>发送操作和接受操作中对元素值的处理时不可分割的；</li><li>发送操作在完全完成之前会被阻塞，接受操作也是如此。</li></ul></li></ul></li><li><p>相关用法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>ch1 &lt;- i<br>&#125;<br><span class="hljs-comment">// close(ch1) // 若不进行主动的通道关闭，将会从一个已经空了的通道内获取值，导致死锁</span><br>&#125;()<br><br><span class="hljs-keyword">for</span> &#123;<br>        j, status := &lt;- ch1 <span class="hljs-comment">// 第一个参数为通道内的值，第二个参数为通道状态标识，false(通道关闭),true(通道开启)</span><br><span class="hljs-keyword">if</span> !status &#123;<br>fmt.Printf(<span class="hljs-string">&quot;status:::%v\n&quot;</span>, status) <span class="hljs-comment">// false</span><br>fmt.Printf(<span class="hljs-string">&quot;chan1 is already closed!\n&quot;</span>)<br><span class="hljs-keyword">break</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;status:::%v\n&quot;</span>, status) <span class="hljs-comment">// true</span><br>fmt.Printf(<span class="hljs-string">&quot;the value is %v\n&quot;</span>, j) <span class="hljs-comment">// 0,1,2,3,4,5,6,7,8,9</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// 日常中应该注意，无缓冲通道和缓冲通道缓冲用尽后均为同步操作，要避免出现死锁</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>golang-slice</title>
    <link href="/2020/12/23/undefined/"/>
    <url>/2020/12/23/undefined/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-slice"><a href="#golang-slice" class="headerlink" title="golang-slice"></a>golang-slice</h1><ul><li><p>定义</p><ul><li><p>《go程序设计语言》中的定义：</p><p>slice 标识一个拥有相同类型元素的可变长度的序列。slice通常写成 []T，其中元素的类型都是T；他看上去像没有长度的数组类型。</p><p>数组和slice是紧密关联的。slice是一种轻量级的数据结构，可以用来访问数组的部分或者全部的元素，而这个数组成为slice的底层数组。slice有三个属性：指针、长度和容量。指针指向数组的第一个可以从slice中访问的元素，这个元素不一定是数组的第一个元素。长度是指slice中的元素个数，它不能超过slice的容量。容量的大小通常是从slice的其实元素到底层数组的最后一个元素捡元素的个数。go的内置函数len和cap用来返回slice的长度和容量。</p></li><li><p>极客时间中的定义：</p><p>切片与数组类似，但是切片的类型字面量中只有元素的类型，而没有长度，切片的长度可以自动地随着其中元素数量的增长二增长，但是不会随着元素数量的减少而减少，切片可以看作是对数组的一层简单的封装，数组可以被叫做切片的底层数组，切片也可以被看作是对数组的某个连续片段的引用，也正是因为次，go语言的切片类型属于引用类型，数组类型则属于值类型。数组的容量永远等于期长度，都是不可变的。但是切片的容量却不是这样，并且切片容量的变化是有规律可循的。</p></li></ul></li><li><p>用法（具体代码）</p><ul><li><p>通过数组得到</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">months := [...]<span class="hljs-keyword">string</span>&#123;<span class="hljs-number">1</span>:<span class="hljs-string">&quot;January&quot;</span>, <span class="hljs-comment">/**/</span>,<span class="hljs-number">12</span>:<span class="hljs-string">&quot;December&quot;</span>&#125; <span class="hljs-comment">//省略了指定数据元素的具体过程</span><br><span class="hljs-comment">// 通过声明的months数组截取连续的片段得到切片</span><br>Q2 := months[<span class="hljs-number">4</span>:<span class="hljs-number">7</span>]<br>summer := months[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br><span class="hljs-comment">// 通过go自带的方法len()和cap()得到切片的长度和容量</span><br>fmt.Printf(<span class="hljs-string">&quot;Q2的长度:%v, summer的长度:%v, months的长度:%v\n&quot;</span>, <span class="hljs-built_in">len</span>(Q2), <span class="hljs-built_in">len</span>(summer), <span class="hljs-built_in">len</span>(months))<br>fmt.Printf(<span class="hljs-string">&quot;Q2的容量:%v, summer的容量:%v, months的容量:%v\n&quot;</span>, <span class="hljs-built_in">cap</span>(Q2), <span class="hljs-built_in">cap</span>(summer), <span class="hljs-built_in">cap</span>(months))<br>fmt.Printf(<span class="hljs-string">&quot;Q2::%v, summer::%v, months::%v\n&quot;</span>, Q2, summer, months)<br><br><span class="hljs-comment">// 打印结果</span><br>Q2的长度:<span class="hljs-number">3</span>, summer的长度:<span class="hljs-number">3</span>, months的长度:<span class="hljs-number">13</span><br>Q2的容量:<span class="hljs-number">9</span>, summer的容量:<span class="hljs-number">7</span>, months的容量:<span class="hljs-number">13</span><br>Q2::[April May June], summer::[June July August], months::[ January February March April May June July August September October November December]<br></code></pre></td></tr></table></figure></li><li><p>通过make方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// make创建切片，</span><br><span class="hljs-comment">// make([]T, len), 此时长度和容量相等均为len</span><br><span class="hljs-comment">// make([]T, len, cap)</span><br><span class="hljs-comment">// make([]T, cap)[:len]</span><br>s1 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>s2 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">string</span>, <span class="hljs-number">4</span>)<br>s3 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">5</span>)[:<span class="hljs-number">3</span>]<br>fmt.Printf(<span class="hljs-string">&quot;s1的长度：%v, s1的容量：%v\n&quot;</span>, <span class="hljs-built_in">len</span>(s1), <span class="hljs-built_in">cap</span>(s1))<br>fmt.Printf(<span class="hljs-string">&quot;s2的长度：%v, s2的容量：%v\n&quot;</span>, <span class="hljs-built_in">len</span>(s2), <span class="hljs-built_in">cap</span>(s2))<br>fmt.Printf(<span class="hljs-string">&quot;s3的长度：%v, s3的容量：%v\n&quot;</span>, <span class="hljs-built_in">len</span>(s3), <span class="hljs-built_in">cap</span>(s3))<br><br><span class="hljs-comment">// 打印内容</span><br>s1的长度：<span class="hljs-number">3</span>, s1的容量：<span class="hljs-number">5</span><br>s2的长度：<span class="hljs-number">4</span>, s2的容量：<span class="hljs-number">4</span><br>s3的长度：<span class="hljs-number">3</span>, s3的容量：<span class="hljs-number">5</span><br><br><span class="hljs-comment">// 使用make方法即通过make创建了一个无名数组，并返回了该数组的切片，这个数组只能通过该切片访问</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>部分细节</p><ul><li><p>若切片的引用超出容量，则会导致越界，若切片的引用只是超出了长度，则会按照底层数组进行扩充</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">months := [...]<span class="hljs-keyword">string</span>&#123;<span class="hljs-number">1</span>:<span class="hljs-string">&quot;January&quot;</span>, <span class="hljs-comment">/**/</span>,<span class="hljs-number">12</span>:<span class="hljs-string">&quot;December&quot;</span>&#125;<br>summer := months[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>s4 := summer[:<span class="hljs-number">5</span>]<br><span class="hljs-comment">//s5 := summer[:13]  会提示slice bounds out of range</span><br>fmt.Printf(<span class="hljs-string">&quot;s4::%v\n&quot;</span>, s4)<br><span class="hljs-comment">// 打印内容</span><br>s4::[June July August September October]<br></code></pre></td></tr></table></figure></li><li><p>与数组有存在差别，切片无法进行比较，除了标准库中提供了bytes.Equal函数来比较两个字节切片（[]byte）</p></li><li><p>切片的零值是nil，值为nil的切片没有底层数组，其长度和容量均为零</p></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>写在前面</title>
    <link href="/2020/12/21/undefined/"/>
    <url>/2020/12/21/undefined/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>​    <strong>回顾</strong>上次写博客已经是三年前的事儿了，这期间虽然也学到了不少东西，也有过不少感触和思考，但是都没有特意地总结过，现在看来似乎不少东西都已经流逝在日常的休闲娱乐中了，仔细想想并不喜欢这种感觉，于是准备重开写博客的计划。</p><p>​    <strong>最近</strong>有在学习新语言，同时也在摸索快速掌握新语言的方法，也希望把学习和探索的过程记录下来以供后面进行回顾和加深记忆。</p><p>​    关于<strong>未来</strong>，在技术类博客方面，我希望将这里打造成记录我成长和技术进步的地方，将学习的过程以及最终结果总结成博客的形式，既是一个分享，也是对知识点的进一步了解；在兴趣爱好方面，我也希望能分享一些我感兴趣的爱好，这些可能是别人的专业，但是作为爱好我也需要这样一份鞭策让我能在这条路上走得更远，目标不是与职业进行对比，至少能让我收获足够的成就感就行，毕竟学习工作之余能有一个或者多个喜欢的兴趣爱好填充是我目前比较追求的生活状态。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
