<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>golang-function</title>
    <link href="/2021/01/19/undefined/"/>
    <url>/2021/01/19/undefined/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-function"><a href="#golang-function" class="headerlink" title="golang-function"></a>golang-function</h1><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>函数包含连续的执行语句，通过调用函数来执行他们，函数可以将复杂的功能切分为更小的模块，增加协同合作的便利性；函数也能向外部封装了实现细节，能更好地控制代码的行为；另外，函数在<code>go</code>语言中也能作为变量，能在函数中传递，也能做赋值，类型判断，转换等操作。</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li><p>函数的声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">name</span><span class="hljs-params">(parameter-list)</span> <span class="hljs-params">(result-list)</span></span> &#123;<br>    body<br>&#125;<br><span class="hljs-comment">// 函数的声明都包含一个名字、一个形参列表、一个可选的返回值列表以及函数体</span><br></code></pre></td></tr></table></figure></li><li><p>匿名函数</p><p>与之相对应的即为命名函数，命名函数只能在包级别的作用域进行声明（即任何函数都不能被声明在另一个函数体内），但是我们能使用函数字面量在任何表达式内指定函数变量，与命名函数类似，但是在<code>func</code>后并没有函数名称，只是一个表达式，即为匿名函数，且匿名函数定义不属于函数声明。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;somethings&quot;</span><br><span class="hljs-comment">//func() &#123;</span><br><span class="hljs-comment">//fmt.Println(str)</span><br><span class="hljs-comment">//&#125;()</span><br>f := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(str)<br>&#125;<br>    f() <br>    <span class="hljs-comment">// 上面匿名函数末尾的()即为调用函数，注释部分的用法就是定义了一个匿名函数并立即调用</span><br>    <span class="hljs-comment">// 可以将匿名函数赋值给变量，然后单独调用，这里和注释部分是等价的</span><br>&#125;<br></code></pre></td></tr></table></figure><p>提到匿名函数，必然还会说到闭包，<code>go</code>语言中的所有的自定义函数（包括声明的函数和匿名函数）都可以被视为闭包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>x, y := <span class="hljs-number">3</span>,<span class="hljs-number">4</span><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>fmt.Printf(<span class="hljs-string">&quot;x + y = %v\n&quot;</span>, x + y) <span class="hljs-comment">// x + y = 7</span><br>&#125;()<br><span class="hljs-comment">// 此时函数处于x,y作用域内，不需要传递参数仍然可以获取到，这样的函数被成为闭包。</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-comment">// y := 5</span><br>fmt.Printf(<span class="hljs-string">&quot;x = %v; y = %v\n&quot;</span>, x, y) <span class="hljs-comment">// x = 4; y = 4</span><br>&#125;(y)<br><span class="hljs-comment">// 将实参y传递给了形参x，由于函数内没有y，故跳出一层找到了y，若在函数内定义了y，便会取函数内的y</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>变长参数函数</p><ul><li>变长参数函数声明：与普通函数类似，不过最后一个参数必须为变长参数，这个变长参数在函数体内会被识别为切片</li><li>变长参数函数调用：可以使用两种分割的方式将实参传递给类型为<code>[]T</code>的变长形参<em>（注：两种方法不能混用）</em>：<ul><li>传递零个或者多个可以被隐式转换为<code>T</code>的实参（或者说这些实参可以赋值给类型为<code>T</code>的值）。有些实参将被添加入一个匿名的在运行时刻创建的类型为<code>[]T</code>的切片中，然后此切片将被传递给此函数调用。</li><li>传递一个切片作为实参，此切片必须可以被赋值给类型为<code>[]T</code>的值（或者说此切片可以被隐式转换为类型<code>[]T</code>）。此实参切片后必须跟随三个点<code>...</code></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a0 := Sum()<br>a1 := Sum(<span class="hljs-number">2</span>)<br>a2 := Sum(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>fmt.Printf(<span class="hljs-string">&quot;a0 = %v; a1 = %v; a2 = %v\n&quot;</span>, a0, a1, a2)<br><br>n := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>b0 := Sum()<br>b1 := Sum([]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>&#125;...)<br>b2 := Sum(n...)<br>fmt.Printf(<span class="hljs-string">&quot;b0 = %v; b1 = %v; b2 = %v\n&quot;</span>, b0, b1, b2)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sum</span><span class="hljs-params">(values ...<span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(sum <span class="hljs-keyword">int</span>)</span></span> &#123;<br>sum = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _,v := <span class="hljs-keyword">range</span> values &#123;<br>sum += v<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>函数原型</p><p>一个函数原型由函数名称、函数类型（或者说函数签名）组成。相比函数，函数原型缺少了函数体。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">noBody</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(output <span class="hljs-keyword">int</span>)</span></span><br></code></pre></td></tr></table></figure></li></ul><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ul><li><p>函数的类型称作<code>函数签名</code>，当两个函数拥有相同的形参列表和返回列表时，认为这两个函数的类型或签名是相同的</p></li><li><p>实参是按值传递的，函数接收到的是每个实参的副本，修改函数的形参变量并不会影响到调用者提供的实参，但是如果实参包含引用类型，比如<code>指针</code>、<code>slice</code>、<code>map</code>、<code>函数</code>或者<code>通道</code>，则在函数使用形参时是可以间接修改实参变量的。</p></li><li><p>函数支持多返回值，在函数返回值列表中按照顺序写好即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 例如println源码，返回参数就有两个，一个int型的n，一个error类型的err</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Println</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;<br><span class="hljs-keyword">return</span> Fprintln(os.Stdout, a...)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>递归</p><p>函数可以递归调用，这样就能适用于有很多重复操作的问题，例如爬虫中对链接的解析等等，一般递归的要点在于找到通项公式与规律（一个能循环下去的规律），同样要注意在递归代码的书写中要注意跳出条件，不然会导致<code>panic</code>。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>golang-stack</title>
    <link href="/2021/01/15/undefined/"/>
    <url>/2021/01/15/undefined/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-stack"><a href="#golang-stack" class="headerlink" title="golang-stack"></a>golang-stack</h1><h4 id="go语言的栈实现"><a href="#go语言的栈实现" class="headerlink" title="go语言的栈实现"></a>go语言的栈实现</h4><ul><li><p>通过slice实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> StackSlice <span class="hljs-keyword">struct</span> &#123;<br>item []Item<br>lock *sync.Mutex<br>&#125;<br><span class="hljs-keyword">type</span> Item <span class="hljs-keyword">interface</span>&#123;&#125;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">()</span> *<span class="hljs-title">StackSlice</span></span> &#123;<br><span class="hljs-keyword">return</span> &amp;StackSlice&#123;<span class="hljs-literal">nil</span>, &amp;sync.Mutex&#123;&#125;&#125;<br>&#125;<br><span class="hljs-comment">// push</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *StackSlice)</span><span class="hljs-title">Push</span><span class="hljs-params">(t <span class="hljs-keyword">int</span>)</span></span> &#123;<br>s.lock.Lock()<br><span class="hljs-keyword">defer</span> s.lock.Unlock()<br>s.item = <span class="hljs-built_in">append</span>(s.item, t)<br>&#125;<br><span class="hljs-comment">// pop</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *StackSlice)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>s.lock.Lock()<br><span class="hljs-keyword">defer</span> s.lock.Unlock()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s.item) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>item := s.item[<span class="hljs-built_in">len</span>(s.item) - <span class="hljs-number">1</span>]<br>s.item = s.item[<span class="hljs-number">0</span>:<span class="hljs-built_in">len</span>(s.item) - <span class="hljs-number">1</span>]<br><span class="hljs-keyword">return</span> item<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>stackSlice := New()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>stackSlice.Push(i)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;pop::%v\n&quot;</span>, stackSlice.Pop()) <span class="hljs-comment">// pop::9</span><br>fmt.Printf(<span class="hljs-string">&quot;stackSlice.item::%v\n&quot;</span>, stackSlice.item) <span class="hljs-comment">// sliceStacks.item::[0 1 2 3 4 5 6 7 8]</span><br>&#125;<br><br><span class="hljs-comment">// 通过封装slice来模拟栈的数据结构，push即为append，pop即将slice最后一个元素移除。但是由于用的是slice，pop不会降低内存占用。</span><br></code></pre></td></tr></table></figure></li><li><p>通过list实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> listStack <span class="hljs-keyword">struct</span> &#123;<br>list *list.List<br>lock *sync.Mutex<br>&#125;<br><br><span class="hljs-comment">// init</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewListStack</span><span class="hljs-params">()</span> *<span class="hljs-title">listStack</span></span> &#123;<br><span class="hljs-keyword">return</span> &amp;listStack&#123;list.New(), &amp;sync.Mutex&#123;&#125;&#125;<br>&#125;<br><span class="hljs-comment">// push</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *listStack)</span> <span class="hljs-title">Push</span><span class="hljs-params">(value <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>s.lock.Lock()<br><span class="hljs-keyword">defer</span> s.lock.Unlock()<br>s.list.PushBack(value)<br>&#125;<br><span class="hljs-comment">// pop</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *listStack)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>s.lock.Lock()<br><span class="hljs-keyword">defer</span> s.lock.Unlock()<br>e := s.list.Back()<br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;<br>s.list.Remove(e)<br><span class="hljs-keyword">return</span> e.Value<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// peak</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *listStack)</span> <span class="hljs-title">Peak</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>e := s.list.Back()<br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> e.Value<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// length</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *listStack)</span> <span class="hljs-title">Len</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> s.list.Len()<br>&#125;<br><span class="hljs-comment">// is empty</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *listStack)</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br><span class="hljs-keyword">return</span> s.Empty() == <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-comment">// main</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listStacks := NewListStack()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>listStacks.Push(i)<br>fmt.Printf(<span class="hljs-string">&quot;listStack list : %v\n&quot;</span>, listStacks.Peak()) <span class="hljs-comment">// 0 ~ 9</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;pop::%v\n&quot;</span>, listStacks.Pop()) <span class="hljs-comment">// pop::9</span><br>fmt.Printf(<span class="hljs-string">&quot;listStack list : %v\n&quot;</span>, listStacks.Peak()) <span class="hljs-comment">// listStack list : 8</span><br>&#125;<br><br><span class="hljs-comment">// list实现的是双向链表，通过双向链表模拟栈，具体方法参看list.go</span><br></code></pre></td></tr></table></figure></li><li><p>通过自定义数据结构实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> (<br>    Stack <span class="hljs-keyword">struct</span> &#123;<br>        top *node<br>        length <span class="hljs-keyword">int</span><br>        lock *sync.RWMutex<br>    &#125;<br>    node <span class="hljs-keyword">struct</span> &#123;<br>        value <span class="hljs-keyword">interface</span>&#123;&#125;<br>        prev *node<br>    &#125;<br>)<br><br><span class="hljs-comment">// init</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewStack</span><span class="hljs-params">()</span> *<span class="hljs-title">Stack</span></span> &#123;<br>    <span class="hljs-keyword">return</span> &amp;Stack&#123;<span class="hljs-literal">nil</span>, <span class="hljs-number">0</span>, &amp;sync.RWMutex&#123;&#125;&#125;<br>&#125;<br><br><span class="hljs-comment">// length</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Stack)</span> <span class="hljs-title">Len</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">return</span> s.length<br>&#125;<br><br><span class="hljs-comment">// peek</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Stack)</span> <span class="hljs-title">Peek</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>    <span class="hljs-keyword">if</span> s.Len() == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> s.top.value<br>&#125;<br><br><span class="hljs-comment">// push</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Stack)</span> <span class="hljs-title">Push</span><span class="hljs-params">(value <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>    s.lock.Lock()<br>    <span class="hljs-keyword">defer</span> s.lock.Unlock()<br>    n := &amp;node&#123;value, s.top&#125;<br>    s.top = n<br>    s.length++<br>&#125;<br><br><span class="hljs-comment">// pop</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Stack)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>    s.sync.Lock()<br>    <span class="hljs-keyword">defer</span> s.sync.Unlock()<br>    <span class="hljs-keyword">if</span> s.length == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    n := s.top.prev<br>    s.top = n<br>    s.length--<br>    <span class="hljs-keyword">return</span> n.value<br>&#125;<br><span class="hljs-comment">// main</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>freeStacks := NewStack()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>freeStacks.Push(i)<br>fmt.Printf(<span class="hljs-string">&quot;freeStacks list : %v\n&quot;</span>, freeStacks.Peek()) <span class="hljs-comment">// 0 ~ 9</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;pop::%v\n&quot;</span>, freeStacks.Pop()) <span class="hljs-comment">// pop::9</span><br>fmt.Printf(<span class="hljs-string">&quot;freeStacks list : %v\n&quot;</span>, freeStacks.Peek()) <span class="hljs-comment">// freeStacks list : 8</span><br>&#125;<br><br><span class="hljs-comment">// 个人推荐使用自定义数据结构实现，这种方法能更加灵活，我们也能根据具体面对的情况对内部实现或者数据结构做出修改。并且综合效率也要比其它几种更高，具体的性能测试留到后面再进行补充。</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>参考：</p><p><a href="https://hansedong.github.io/2019/04/02/15/">https://hansedong.github.io/2019/04/02/15/</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>golang-channel</title>
    <link href="/2021/01/05/undefined/"/>
    <url>/2021/01/05/undefined/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-channel"><a href="#golang-channel" class="headerlink" title="golang-channel"></a>golang-channel</h1><ul><li><p>概述</p><ul><li><p>通道是可以让一个goroutine发送特定知道倒另一个goroutine的通信机制。每一个通道是一个具体类型的导管，叫做通道的元素类型，通道的作用是连接各个goroutine。通道为引用类型，零值为nil，同类型的通道可以用“==”进行判等操作。</p></li><li><p>通道有两个主要操作：发送（send）和接收（receive），两者统称为通信。<code>ch &lt;- x</code>为将x发送到ch通道中，<code>x = &lt;- ch</code>为接收ch通道中的信息，<code>&lt;- ch</code>为接收通道ch中信息并丢弃。</p></li><li><p>通道还支持第三种操作：关闭（close），它通过一个标志位来指示当前已经发送完毕，这个通道后面没有值了，关闭后的通道执行发送操作将引发panic，在一个已经关闭的通道上进行操作，将获取所有已经发送的值，直到通道为空；这时任何接收操作都会立即完成，同时获取到一个通道元素类型对应的零值。调用内置函数<code>close(ch)</code>关闭ch通道</p></li><li><p>根据使用场景进行细分，通道有一种单向通道类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">ch1 <span class="hljs-keyword">chan</span> &lt;- <span class="hljs-keyword">int</span> p<br><span class="hljs-comment">// ch1:通道名</span><br><span class="hljs-comment">// chan &lt;- :指定了通道的方向，为仅发送的通道</span><br><span class="hljs-comment">// int :指定了该通道内元素为int</span><br>ch2 &lt;- <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span><br><span class="hljs-comment">// ch2:通道名</span><br><span class="hljs-comment">// &lt;- chan:指定了通道的方向，为仅接收的通道</span><br><span class="hljs-comment">// int:指定了该通道内元素为int</span><br><br>单向通道主要用来防止通道被滥用，约束函数的行为<br>在使用过程中，任何时间将双向通道转换为单向通道都是可行的，但是反过来是不允许的<br></code></pre></td></tr></table></figure></li><li><p>通道可以设置缓冲，通过make设置的可选参数进行调整，默认为无缓冲通道。无缓冲通道的发送接收流程是阻塞的，只要发送的信息违背接收没发送操作将被阻塞，直到上一个信息被接。缓冲通道在上一条信息为被接收时根据缓冲区大小仍可以进行发送信息操作，直到缓冲区为零，接收操作类似。</p></li></ul></li><li><p>其它</p><ul><li><p>发送信息到通道，发送的时副本，即发生发送操作时，存在两步流程：1、复制信息的值；2、将复制的值放入通道。接受操作有三步流程：1、复制通道内信息的值；2、将复制的值放到信息接收方；3、删除掉通道内的信息值。</p></li><li><p>对通道的发送和接收操作的基本特性</p><ul><li>对于同一个通道，发送操作之间时互斥的，接受操作之间也是互斥的；</li><li>发送操作和接受操作中对元素值的处理时不可分割的；</li><li>发送操作在完全完成之前会被阻塞，接受操作也是如此。</li></ul></li></ul></li><li><p>声明和用法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>ch1 &lt;- i<br>&#125;<br><span class="hljs-comment">// close(ch1) // 若不进行主动的通道关闭，将会从一个已经空了的通道内获取值，导致死锁</span><br>&#125;()<br><br><span class="hljs-keyword">for</span> &#123;<br>        j, status := &lt;- ch1 <span class="hljs-comment">// 第一个参数为通道内的值，第二个参数为通道状态标识，false(通道关闭),true(通道开启)</span><br><span class="hljs-keyword">if</span> !status &#123;<br>fmt.Printf(<span class="hljs-string">&quot;status:::%v\n&quot;</span>, status) <span class="hljs-comment">// false</span><br>fmt.Printf(<span class="hljs-string">&quot;chan1 is already closed!\n&quot;</span>)<br><span class="hljs-keyword">break</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;status:::%v\n&quot;</span>, status) <span class="hljs-comment">// true</span><br>fmt.Printf(<span class="hljs-string">&quot;the value is %v\n&quot;</span>, j) <span class="hljs-comment">// 0,1,2,3,4,5,6,7,8,9</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// 日常中应该注意，无缓冲通道和缓冲通道缓冲用尽后均为同步操作，要避免出现死锁</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>golang-slice</title>
    <link href="/2020/12/23/undefined/"/>
    <url>/2020/12/23/undefined/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-slice"><a href="#golang-slice" class="headerlink" title="golang-slice"></a>golang-slice</h1><ul><li>概述<ul><li><code>slice</code>通常被写作<code>[]T</code>，其中T为slice（切片）中的元素类型。</li><li>slice有三个属性：指针、长度和容量。指针指向数组中第一个可被slice访问的元素（这个元素不一定是数组中的第一个元素）；长度是指slice中的元素个数，它不能超过slice的容量；容量为从底层数组中可被slice访问的第一个元素到底层数组最后一个元素的个数。</li><li>slice可以看作对数组的一层封装，它是对底层数组某个连续片段的引用，因此，slice是引用类型。</li></ul></li></ul><ul><li><p>声明和用法</p><ul><li><p>通过数组得到</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">months := [...]<span class="hljs-keyword">string</span>&#123;<span class="hljs-number">1</span>:<span class="hljs-string">&quot;January&quot;</span>, <span class="hljs-comment">/**/</span>,<span class="hljs-number">12</span>:<span class="hljs-string">&quot;December&quot;</span>&#125; <span class="hljs-comment">//省略了指定数据元素的具体过程</span><br><span class="hljs-comment">// 通过声明的months数组截取连续的片段得到切片</span><br>Q2 := months[<span class="hljs-number">4</span>:<span class="hljs-number">7</span>]<br>summer := months[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br><span class="hljs-comment">// 通过go自带的方法len()和cap()得到切片的长度和容量</span><br>fmt.Printf(<span class="hljs-string">&quot;Q2的长度:%v, summer的长度:%v, months的长度:%v\n&quot;</span>, <span class="hljs-built_in">len</span>(Q2), <span class="hljs-built_in">len</span>(summer), <span class="hljs-built_in">len</span>(months))<br>fmt.Printf(<span class="hljs-string">&quot;Q2的容量:%v, summer的容量:%v, months的容量:%v\n&quot;</span>, <span class="hljs-built_in">cap</span>(Q2), <span class="hljs-built_in">cap</span>(summer), <span class="hljs-built_in">cap</span>(months))<br>fmt.Printf(<span class="hljs-string">&quot;Q2::%v, summer::%v, months::%v\n&quot;</span>, Q2, summer, months)<br><br><span class="hljs-comment">// 打印结果</span><br>Q2的长度:<span class="hljs-number">3</span>, summer的长度:<span class="hljs-number">3</span>, months的长度:<span class="hljs-number">13</span><br>Q2的容量:<span class="hljs-number">9</span>, summer的容量:<span class="hljs-number">7</span>, months的容量:<span class="hljs-number">13</span><br>Q2::[April May June], summer::[June July August], months::[ January February March April May June July August September October November December]<br></code></pre></td></tr></table></figure></li><li><p>通过make方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// make创建切片，</span><br><span class="hljs-comment">// make([]T, len), 此时长度和容量相等均为len</span><br><span class="hljs-comment">// make([]T, len, cap)</span><br><span class="hljs-comment">// make([]T, cap)[:len]</span><br>s1 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>s2 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">string</span>, <span class="hljs-number">4</span>)<br>s3 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">5</span>)[:<span class="hljs-number">3</span>]<br>fmt.Printf(<span class="hljs-string">&quot;s1的长度：%v, s1的容量：%v\n&quot;</span>, <span class="hljs-built_in">len</span>(s1), <span class="hljs-built_in">cap</span>(s1))<br>fmt.Printf(<span class="hljs-string">&quot;s2的长度：%v, s2的容量：%v\n&quot;</span>, <span class="hljs-built_in">len</span>(s2), <span class="hljs-built_in">cap</span>(s2))<br>fmt.Printf(<span class="hljs-string">&quot;s3的长度：%v, s3的容量：%v\n&quot;</span>, <span class="hljs-built_in">len</span>(s3), <span class="hljs-built_in">cap</span>(s3))<br><br><span class="hljs-comment">// 打印内容</span><br>s1的长度：<span class="hljs-number">3</span>, s1的容量：<span class="hljs-number">5</span><br>s2的长度：<span class="hljs-number">4</span>, s2的容量：<span class="hljs-number">4</span><br>s3的长度：<span class="hljs-number">3</span>, s3的容量：<span class="hljs-number">5</span><br><br><span class="hljs-comment">// 使用make方法即通过make创建了一个无名数组，并返回了该数组的切片，这个数组只能通过该切片访问</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>部分细节</p><ul><li><p>若切片的引用超出容量，则会导致越界，若切片的引用只是超出了长度，则会按照底层数组进行扩充</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">months := [...]<span class="hljs-keyword">string</span>&#123;<span class="hljs-number">1</span>:<span class="hljs-string">&quot;January&quot;</span>, <span class="hljs-comment">/**/</span>,<span class="hljs-number">12</span>:<span class="hljs-string">&quot;December&quot;</span>&#125;<br>summer := months[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>s4 := summer[:<span class="hljs-number">5</span>]<br><span class="hljs-comment">//s5 := summer[:13]  会提示slice bounds out of range</span><br>fmt.Printf(<span class="hljs-string">&quot;s4::%v\n&quot;</span>, s4)<br><span class="hljs-comment">// 打印内容</span><br>s4::[June July August September October]<br></code></pre></td></tr></table></figure></li><li><p>与数组有存在差别，切片无法进行比较，除了标准库中提供了bytes.Equal函数来比较两个字节切片（[]byte）</p></li><li><p>切片的零值是nil，值为nil的切片没有底层数组，其长度和容量均为零</p></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
